//  MIT License
//
//  Copyright (c) 2020 Thales DIS
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.

// IMPORTANT: This source code is intended to serve training information purposes only.
//            Please make sure to review our IdCloud documentation, including security guidelines.

#import <EzioMobile/EzioMobile.h>

/**
 Activation code is used to enable individual supported features
 
 @return Activation code.
 */
__unused static NSData *CFG_ACTIVATION_CODE()
{
    // TODO: insert here the activation code from the onboarding output form
    static const unsigned char raw[] =
    {   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00
    };
    
    return [NSData dataWithBytes:raw length:sizeof(raw)];
}

/**
 The URL of the Enrollment API endpoint, e.g: “https://api/provisioning/pp”
 
 @return Provision URL
 */
__unused static NSURL *CFG_PROVISION_URL()
{
    // TODO: insert here the URL from the onboarding output form
    return [NSURL URLWithString:@"https://provisioning-url"];
}

/**
 Identifier for the EPS server’s public RSA key.
 
 @return RSA Key Id
 */
__unused static NSString *CFG_RSA_KEY_ID()
{
    // TODO: insert here the RSA key ID from the onboarding output form
    return @"eps-public-key";
}

/**
 The RSA exponent of the EPS public key (on provisioning protocol level, not transport level).
 
 @return RSA Key Exponent
 */
__unused static NSData *CFG_RSA_KEY_EXPONENT()
{
    // TODO: insert here the RSA key exponent from the onboarding output form
    static const unsigned char raw[] = {0x00, 0x00, 0x00};
    return [NSData dataWithBytes:raw length:sizeof(raw)];
}

/**
 The RSA modulus of the EPS public key (on provisioning protocol level, not transport level).
 
 @return RSA Key Modulus
 */
__unused static NSData *CFG_RSA_KEY_MODULUS()
{
    // TODO: insert here the RSA key modulus from the onboarding output form
    static const unsigned char  raw[] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00
    };
    return [NSData dataWithBytes:raw length:sizeof(raw)];
}

/**
 This configuration will allow to weaken TLS configuration for debug purposes. It’s not allowed to modify in release mode.
 
 @return TLS Configuration
 */
__unused static EMTlsConfiguration *CFG_TLS_CONFIGURATION()
{
    return [[EMTlsConfiguration alloc] initWithInsecureConnectionAllowed:NO
                                                   selfSignedCertAllowed:NO
                                                 hostnameMismatchAllowed:NO];
}

/**
 Suite will set all relevant OCRA settings accordingly.
 
 @return OCRA Suite
 */
__unused static id<EMSecureString> CFG_OCRA_SUITE()
{
    // TODO: insert here the OCRA suite name from the onboarding output form
    return [[[EMCore sharedInstance] secureContainerFactory] secureStringFromString:@""];
}

/**
 Gets the custom fingerprint data.
 
 @return Custom fingerprint data.
 */
__unused static NSData *CFG_CUSTOM_FINGERPRINT_DATA()
{
    static const NSString* customFingerPrintData = @"CUSTOM_FINGERPRINT_DATA";
    
    return [customFingerPrintData dataUsingEncoding:NSUTF8StringEncoding];
}

/**
 Gets the domain.

 @return Domain.
*/
__unused static NSString *CFG_DOMAIN() {
    return @"domain";
}
